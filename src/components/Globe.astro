---
---

<div class="globe-mount"></div>

<script>
  import * as THREE from "three/build/three.min.js";
  import * as topojson from "topojson-client";

  // D3 modules
  import * as d3Array from "d3-array";
  import * as d3Collection from "d3-collection";
  import * as d3Timer from "d3-timer";
  import * as d3Request from "d3-request";
  import * as d3Dispatch from "d3-dispatch";

  // Local
  import { wireframe, vertex } from "../lib/wireframe.js";
  import { graticule10 } from "../lib/graticule10.js";

  const d3 = {
    ...d3Array,
    ...d3Collection,
    ...d3Timer,
    ...d3Request,
    ...d3Dispatch
  };

  const radius = 100;
  const width = 600;
  const height = 600;

  const camera = getCamera();
  const graticule = getGraticule();

  function getCamera() {
    const fov = 70;
    const aspect = width / height;
    const near = 1;
    const far = 1000;
    return new THREE.PerspectiveCamera(fov, aspect, near, far);
  }

  async function getLand() {
    const response = await fetch(
      "https://cdn.jsdelivr.net/npm/world-atlas@2/land-50m.json"
    );
    const topology = await response.json();
    const mesh = topojson.mesh(topology, topology.objects.land);
    return wireframe(mesh, radius, new THREE.LineBasicMaterial({ color: 0xff0000 }));
  }

  function getGraticule() {
    const mesh = graticule10();
    return wireframe(mesh, radius, new THREE.LineBasicMaterial({ color: 0xaaaaaa }));
  }

  const main = async () => {
    const land = await getLand();
    const scene = getScene();

    function getScene() {
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0xffffff);
      scene.add(graticule);
      scene.add(land);
      return scene;
    }

    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(width, height);
    renderer.setPixelRatio(devicePixelRatio);

    const t = Date.now();
    const { x, y, z } = vertex([t / 100, Math.sin(t / 5000) * 45], radius * 1.75);
    camera.position.x = x;
    camera.position.y = y;
    camera.position.z = z;
    camera.lookAt(scene.position);
    renderer.render(scene, camera);
    const mount = document.querySelector(".globe-mount");
    mount.appendChild(renderer.domElement);

    d3.timer(function (t) {
      const { x, y, z } = vertex([t / 100, Math.sin(t / 5000) * 45], radius * 1.75);
      camera.position.x = x;
      camera.position.y = y;
      camera.position.z = z;
      camera.lookAt(scene.position);
      renderer.render(scene, camera);
    });
  };

  main();
</script>
